# 混合部署Dockerfile - 在容器内编译whisper.cpp Linux版本
FROM python:3.11-slim

# 设置工作目录
WORKDIR /app

# 安装系统依赖 (包括编译工具)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    git \
    build-essential \
    cmake \
    pkg-config \
    wget \
    && rm -rf /var/lib/apt/lists/*

# 编译whisper.cpp (Linux版本，静态链接)
RUN git clone https://github.com/ggerganov/whisper.cpp.git /tmp/whisper.cpp \
    && cd /tmp/whisper.cpp \
    && mkdir build && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF \
    && make -j$(nproc) \
    && echo "=== Build complete, checking outputs ===" \
    && ls -la . \
    && ls -la bin/ || echo "No bin directory" \
    && ls -la examples/ || echo "No examples directory" \
    && find . -name "whisper-cli" -o -name "main" -o -name "*whisper*" | grep -E "(whisper-cli|main)$" \
    && echo "=== Copying executable ===" \
    && if [ -f "./whisper-cli" ]; then cp ./whisper-cli /usr/local/bin/whisper-cli; \
       elif [ -f "./examples/whisper-cli" ]; then cp ./examples/whisper-cli /usr/local/bin/whisper-cli; \
       elif [ -f "./bin/whisper-cli" ]; then cp ./bin/whisper-cli /usr/local/bin/whisper-cli; \
       elif [ -f "./main" ]; then cp ./main /usr/local/bin/whisper-cli; \
       else echo "ERROR: Could not find whisper executable" && exit 1; fi \
    && chmod +x /usr/local/bin/whisper-cli \
    && echo "=== Testing executable ===" \
    && /usr/local/bin/whisper-cli --help | head -3 || echo "Executable test failed" \
    && ldd /usr/local/bin/whisper-cli || echo "Static binary (no dynamic dependencies)" \
    && rm -rf /tmp/whisper.cpp

# 复制项目文件
COPY pyproject.toml ./

# 升级pip并安装Python依赖
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir -e .

# 创建必要的目录
RUN mkdir -p uploads results models

# 复制应用代码
COPY . .

# 设置环境变量
ENV PYTHONPATH=/app
ENV DEPLOYMENT_MODE=hybrid

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# 暴露端口
EXPOSE 8000

# 默认启动命令
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
